filetype plugin indent on       "enable detection, plugins and indenting in one step
syntax enable                   "Turn on syntax highlighting

let mapleader = ",""            "remap leader to ',' which is much easier than '\'
let maplocalleader = "\\"       "add a local leader of '\'
" remap ; to : so you can just do `;w` instead of <Shift-; w>
nnoremap ; :

"set cindent                    "recommended seting for automatic C-style indentation
"set noexrc                     " don't use the local config
set autoindent                  "automatic indentation in non-C files
set autoread
set background=dark             "make vim use colors that look good on a dark background
set backspace=indent,eol,start  "allow backspacing over everything in insert mode
set breakat=\ ^I!@*-+;:,./?\(\[\{ ""
set cmdheight=2                 "make the command line a little taller to hide 'press enter to viem more' text
set complete=.,w,t
set copyindent                  "copy the previous indentation on autoindenting
set cursorcolumn                "highlight the current column. Visible in GUI mode only.
set cursorline                  "underline the current line in the file
set formatoptions=1
set hidden                      "allow hiding buffers with unsaved changes
set hlsearch                    "hilight searches by default
set ignorecase                  "ignore case when searching
set incsearch                   "find the next match as we type the search
set lazyredraw                  "This stops Vim from redrawing the screen during complex operations and results in much smoother looking plugins.
set linebreak
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set mouse=a
set nocompatible                "don't need to keep compatibility with Vi
set noerrorbells                "don't make noise
set nofoldenable                "dont fold by default
set notimeout ttimeout ttimeoutlen=10 " Quckly time out on keycodes, but never time out on mappings
set nospell
set nowrap                      "no wrapping
set number                      "Show line numbers
set shell=/bin/bash             "I think I need this because I'm running ZSH actually...
set showbreak=↪
set showcmd                     "show incomplete cmds down the bottom
set showmatch                   "set show matching parenthesis
set showmode                    "show current mode down the bottom
set smartcase                   " ... unless they contain at least one capital letter
set smartindent
set smarttab                    "use shiftwidth and softtabstop to insert or delete (on <BS>) blanks
set splitbelow
set splitright
set synmaxcol=800               " Don't try to highlight lines longer than 800 characters.
set timeout timeoutlen=1000 ttimeoutlen=10 " New timeout settings to exit out of insert more quickly
set title
set ttyfast                     " Improves screen redraw
set virtualedit=all             "allow the cursor to go in to 'invalid' places
set wildignore+=*/production_data/*,*/coverage/*,*/accredited_investor_questionnaires/*,*/HTML_DEMOS/*,*/docusign_docs/*,*/cookbooks/*,*/public/uploads/*,*/public/images/*,*/vim_sessions/*,*/tmp/*,*.so,*.swp,*.zip,*/log/    " MacOSX/Linux
set wildmenu
set wildmode=full

set bs=2
set softtabstop=2               "number of spaces to skip or insert when <BS>ing or <Tab>ing
set tabstop=2                   "two tab spaces
set shiftround                  "when at 3 spaces, and I hit > ... go to 4, not 5
set shiftwidth=2                "number of spaces to use in each autoindent step
set expandtab                   "spaces instead of tabs for better cross-editor compatibility

set backupdir=./.backup,/tmp
set directory=./.backup,/tmp

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" To use it with nvim add in .zshrc or .profile: NVIM_TUI_ENABLE_CURSOR_SHAPE=1
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Save when losing focus
" au FocusLost * :silent! wall

" Resize splits when the window is resized
au VimResized * :wincmd =

" slim template detection, the plugin didn't get me goin... FIXME
au BufNewFile,BufRead *.slim setlocal filetype=slim

colorscheme solarized

" STOP the help from being so... HELPFULL ;)
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
" Pasting support
set pastetoggle=<F2>  " Press F2 in insert mode to preserve tabs when pasting from clipboard into terminal
nnoremap <F3> :GundoToggle<CR>

nnoremap <silent> <F7> :YRShow<CR>
nmap <F8> :TagbarToggle<CR>
nnoremap <F9> :Dispatch<CR>

" toggle hide numbers
map <leader>1 :set nonumber! number?<CR>

" ,q to toggle quickfix window (where you have stuff like GitGrep)
" ,oq to open it back up (rare)
nmap <silent> ,cq :cclose<CR>
nmap <silent> ,co :copen<CR>

" Gitv
" --------------
nmap <leader>gv :NERDTreeTabsClose<cr>:Gitv --all<cr>
nmap <leader>gV :NERDTreeTabsClose<cr>:Gitv! --all<cr>
vmap <leader>gV :NERDTreeTabsClose<cr>:Gitv! --all<cr>

" Magit
" --------------
let g:magit_show_magit_mapping="<Leader>gm"

" Exit out of insert and insert a new line before with KK
"inoremap KK <ESC>O

" Exit out of insert and insert a new line with jj
"inoremap jj <ESC>o

" Exit out of insert and insert at line beginning with II
"inoremap II <Esc>I
" Exit out of insert and insert at line end with AA
"inoremap AA <Esc>A

" Redo
map U :redo<CR>

" Load up the vimrc_main file (this file) in vim to edit it
nnoremap <Leader>ev :tabnew ~/.vim/vimrc_main<CR>

map <leader>gR :call ShowRoutes()<cr>

map <leader>gr :topleft 40 :split config/routes.rb<cr>
map <leader>gg :topleft 40 :split Gemfile<cr>

" Easy split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Rake
" --------------
" Rake on current file
"map <leader>R :Rake<cr>
" Rake on current line
"map <leader>r :.Rake<cr>

" Vim: Navivate split
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l

" SEARCH OPTIONS
" -----------------
let g:indexed_search_keep_cursor_on_initial_result=1
" turn highlighting off after a search (and / or turn off highlights)
noremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>

" Toggle keep current line in the center of the screen mode
nnoremap <leader>C :let &scrolloff=999-&scrolloff<cr>

" This rewires n and N to do the highlighing...
nnoremap <silent> N   n:call HLNext(0.4)<cr>
nnoremap <silent> n   N:call HLNext(0.4)<cr>

" Scroll 20 characters to the right
map <C-L> 20zl
" Scroll 20 characters to the left
map <C-H> 20zh

" DRAG IN VISUAL MODE
" -------------------
" <m-j> and <m-k> to drag lines in any mode (m is alt/option)
" this is the textmate move lines around thing that I used to do do with arrow
" keys but less fragile because it works in tmux or not
noremap ˝ :m+<CR>
noremap ˚ :m-2<CR>
inoremap ˝ <Esc>:m+<CR>
inoremap ˚ <Esc>:m-2<CR>
vnoremap ˝ :m'>+<CR>gv
vnoremap ˚ :m-2<CR>gv

" Dragvisuals from Damian Conway
" ------------------------------
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
"vmap  <expr>  D        DVB_Duplicate()

" VMATH from Damian Conway
" ------------------------
vmap <expr>  +=  VMATH_YankAndAnalyse()
nmap         +=  vip++

" Fugitive
" --------------
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>go :Gcheckout<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gl :Glog<cr>

" Numbers
" --------------
" Motion for numbers. Great for CSS.  Lets you do things like this:
" margin-top: 200px; -> ciN -> margin-top: px;
" TODO: Handle floats.
onoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
xnoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
onoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
onoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>

" alphabetize css, or scss
nnoremap <localleader>al :g#\({\n\)\@<=#.,/}/sort<cr>

" -------------- SURROUND SETTINGS -------------------
" ,# Surround a word with #{ruby interpolation}
vmap ,# c#{<C-R>"}<ESC>

" ," Surround a word with "quotes"
map ," ysiw"
vmap ," c"<C-R>""<ESC>

" ,' Surround a word with 'single quotes'
map ,' ysiw'
vmap ,' c'<C-R>"'<ESC>

" ,) or ,( Surround a word with (parens)
" The difference is in whether a space is put in
map ,( ysiw(
map ,) ysiw)
vmap ,( c( <C-R>" )<ESC>
vmap ,) c(<C-R>")<ESC>

" ,[ Surround a word with [brackets]
map ,] ysiw]
map ,[ ysiw[
vmap ,[ c[ <C-R>" ]<ESC>
vmap ,] c[<C-R>"]<ESC>

" ,{ Surround a word with {braces}
map ,} ysiw}
map ,{ ysiw{
vmap ,} c{ <C-R>" }<ESC>
vmap ,{ c{<C-R>"}<ESC>

map ,` ysiw`
" -------------- END SURROUND SETTINGS ---------------

" Coverage-vim
"Shows coverage markers
map <Leader>cv :so coverage.vim<CR>
"Hides coverage markers
map <Leader>cx :Uncov<CR>

" Floobits
" --------------
"map <leader>fs :FlooSummon<cr>
"map <leader>ff :FlooToggleFollowMode<cr>
"map <leader>fj :FlooJoinWorkspace https://floobits.com/r/jondkinney/bolstr<cr>

" Dash
" --------------
"let g:dash_map = {
"  \ 'ruby'       : 'rails'
"  \ }
au BufNewFile,BufRead *.rb :DashKeywords rails ruby<cr>
nmap <silent> <LocalLeader>d <Plug>DashSearch
nmap <silent> <LocalLeader>D <Plug>DashGlobalSearch

" EasyMotion
" --------------
"  Default Mapping             | Details
"  ----------------------------|----------------------------------------------
" <LocalLeader>f{char}      | Find {char} to the right. See |f|.
" <LocalLeader>F{char}      | Find {char} to the left. See |F|.
" <LocalLeader>t{char}      | Till before the {char} to the right. See |t|.
" <LocalLeader>T{char}      | Till after the {char} to the left. See |T|.
" <LocalLeader>w            | Beginning of word forward. See |w|.
" <LocalLeader>W            | Beginning of WORD forward. See |W|.
" <LocalLeader>b            | Beginning of word backward. See |b|.
" <LocalLeader>B            | Beginning of WORD backward. See |B|.
" <LocalLeader>e            | End of word forward. See |e|.
" <LocalLeader>E            | End of WORD forward. See |E|.
" <LocalLeader>ge           | End of word backward. See |ge|.
" <LocalLeader>gE           | End of WORD backward. See |gE|.
" <LocalLeader>j            | Line downward. See |j|.
" <LocalLeader>k            | Line upward. See |k|.
" <LocalLeader>n            | Jump to latest "/" or "?" forward. See |n|.
" <LocalLeader>N            | Jump to latest "/" or "?" backward. See |N|.
" <LocalLeader>s            | Find(Search) {char} forward and backward.

map <LocalLeader> <Plug>(easymotion-prefix)

" ------------------------

" This allows you to share Vim's clipboard with OS X.
" set clipboard=unnamed
if has('nvim')
  " set clipboard+=unnamedplus

  " exit :terminal
  :tnoremap <Esc> <C-\><C-n>
endif

if !has('nvim')
  set encoding=utf-8 " default in nvim
endif

" ------------------------

" Vroom
" ------------------------
if has('nvim')
  let g:vroom_use_color=0
endif

let g:vroom_use_binstubs=1
let g:vroom_use_bundle_exec=1
let g:vroom_cucumber_path='cucumber'

" ------------------------

"" fix mouse support inside tmux
if &term =~ '^screen' || &term =~ '^xterm'
  " tmux knows the extended mouse mode
  set ttyfast ttymouse=xterm2 lazyredraw ttyscroll=3
endif

set guifont=Meslo\ LG\ M\ for\ Powerline

" set text wrapping toggles
"nmap <silent> <leader><Leader>tw :set invwrap<CR>:set wrap?<CR>

" GIT: find merge conflict markers
nmap <silent> <leader>mc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" --------------

" NERDTree
" --------------
" Open NERDTree with [<leader>d]
map <Leader>d :NERDTreeTabsToggle<CR>
" Show current file in the NERDTree hierarchy
map <Leader>D :NERDTreeFind<CR>

let NERDTreeMinimalUI=1
let NERDTreeDirArrows=3
let NERDTreeWinSize = 51
let NERDTreeShowLineNumbers=1
let g:nerdtree_tabs_focus_on_files=0
let g:nerdtree_tabs_synchronize_focus=0
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_open_on_console_startup=0
let g:NERDTreeDirArrowExpandable = '‣'
let g:NERDTreeDirArrowCollapsible = '▾'

" resizes nerdtree if you're cursor is not actually in nerdtree (needs to be to the right of it)
map <leader>5 99+ 51_ j k
map <F5> 99+ 51_ j k

" --------------

" ZFZ
" --------------
map <Leader>f :Files<CR>
map <Leader>b :Buffers<CR>

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" --------------

" Ack
" --------------
" Ack in Project. AckG matches file names in the project, regular Ack looks inside those files
let g:ackhighlight = 1
map <Leader><C-f> :Ack!<space>
map <Leader>F :Ack!<space>

" --------------

" always display the status line
:set laststatus=2
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1
let g:airline_detect_iminsert=1

" to only show the tail, e.g. a branch 'feature/foo' becomes 'foo', use
let g:airline#extensions#branch#format = 1

" truncate long branch names to a fixed length >
let g:airline#extensions#branch#displayed_head_limit = 18

" enable/disable showing a summary of changed hunks under source control.
let g:airline#extensions#hunks#enabled = 0

" enable/disable word counting.
let g:airline#extensions#wordcount#enabled = 0

" The `unique_tail_improved` - another algorithm, that will smartly uniquify
" buffers names with similar filename, suppressing common parts of paths.
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" --------------

" SHOW INVISIBLES
"---------------
"Shortcut to toggle `set list` which turns on and off the whitespace markers
nmap <leader>il :set list!<CR>

"Right margin settings for vim 7.2 or greater
if version > 702
  highlight ColorColumn ctermbg=magenta
  call matchadd('ColorColumn', '\%251v', 100)
endif

" --------------

" WINDOW SPLITS
" -------------
" Better split management, kept in sync with tmux' mappings of (<prefix>| and <prefix>-)
noremap <leader>- :sp<CR><C-w>j
noremap <leader>\| :vsp<CR><C-w>l

if bufwinnr(1)
  map = <C-W>+
  map - <C-W>-
  map + <C-W>>
  map _ <C-W><
endif

" Adjust viewports to the same size
map <Leader>= <C-w>=

" --------------

"TOGGLE RELATIVE NUMBERING
"-------------------------
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc

" --------------

nnoremap <Leader>ll :call NumberToggle()<CR>

" --------------

" Indent guide
" --------------
" Indent guides turned on with <leader>ig
let g:indent_guides_start_level=1
let g:indent_guides_guide_size=1

hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=black

" --------------

" Indent/Outdent
" --------------
" Tab/shift-tab to indent/outdent in visual mode.
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
" Keep selection when indenting/outdenting.
vnoremap > >gv
vnoremap < <gv

" --------------

" Search and Replace
" --------------
"Search and replace the word under the cursor with whatever you type in
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/

"Search and replace only within a given selection. This DOES NOT replace all
" instances on the line that the highlight is on, which is why it's awesome.
vnoremap <Leader>S :s/\%V//g<Left><Left><Left>

" --------------

" Vim quick comande
" --------------
" Allow for typing various quit cmds while accidentally capitalizing a letter
command! -bar Q quit                      "Allow quitting using :Q
command! -bar -bang Q quit<bang>          "Allow quitting without saving using :Q!
command! -bar QA qall                     "Quit all buffers
command! -bar Qa qall                     "Quit all buffers
command! -bar -bang QA qall<bang>         "Allow quitting without saving using :Q!
command! -bar -bang Qa qall<bang>         "Allow quitting without saving using :Q!
" NOTE - the above has nothing to do with the quit commands below

" Make Q useful and avoid the confusing Ex mode.
" Pressing Q with this mapping does nothing intentionally
noremap Q <nop>

" Close window.
noremap QQ :bd<CR>

" close and write
noremap WQ :w<CR>:bd<CR>

" Close a full tab page.
noremap QW :windo bd<CR>

" Close all.
noremap QA :qa<CR>

" Close, damn you!
noremap Q! :q!<CR>

"I never much liked the S command in normal mode. Substitutes the whole line after a motion. So we'll disable it here.
nmap S <nop>

" remove double empty line
"noremap SS :w<CR>
noremap SS :w<CR>
noremap CF :call CleanFile()<CR>

"Save the current file even if you don't have permission to do so
map W!! :w !sudo tee % > /dev/null<CR>
cmap w!! w !sudo tee % >/dev/null

" --------------

" Ctags
" --------------
"Update CTags
map <Leader>ct :!ctags -R --exclude=.git --exclude=log --exclude=.svn --verbose=yes * <CR>

" ExCTags window (requires http://ctags.sourceforge.net/)
let g:tagbar_left = 1
"autocmd FileType * nested :call tagbar#autoopen()
let g:tagbar_autofocus = 1
let g:tagbar_compact = 1
let g:tagbar_autoclose = 1

" open ctag in tab/vertical split
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <leader><C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" --------------

" Underline the current line
" --------------
" with '='
"==========
nmap <silent> <localleader>= :t.\|s/./=/g\|:nohls<cr>
" with '-'
"---------
nmap <silent> <localleader>- :t.\|s/./-/g\|:nohls<cr>

" --------------

" Screen Movement
" --------------
" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" --------------

" TABS
" --------------
" previous tab '('
nnoremap ( :tabp<CR>
" next tab ')'
nnoremap ) :tabn<CR>

nmap <leader>t :tabnew<CR>

" Load up all buffers into tabs
nmap <localleader>bt :tab sball<CR>

" --------------

" copy/paste
" --------------
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>

" copy/paste to Clipboard only
noremap <Leader>y "*y
noremap <Leader>yy "*yy
noremap <Leader>p "*p
" copy/paste to both Clipboard and Primary (vim)
noremap <Leader>Y "+y
noremap <Leader>YY "+yy
noremap <Leader>P "+p

" --------------

" Cucumber (cucumber.vim)
" --------------
" vim-cucumber provides commands to jump from steps to step definitions in feature files.
"
" In normal mode:
" `[d` or `]d` on a step opens the step definition in a new split buffer while maintaining the current cursor position.
nmap <Leader>sd [d
" `[<C-d>` or `]<C-d>` on a step jumps to the corresponding step definition and replaces the current buffer.
nmap <Leader>SD [<C-d>
" `<C-W>d` or `<C-w><C-d>` on a step jumps to its definition in a new split buffer and moves the cursor there.

" --------------

" Tabularize
" --------------
" Alignment stuff
"if exists(":Tabularize")
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,\zs<CR>
vmap <Leader>a, :Tabularize /,\zs<CR>

" Triggers align of cucumber tables when you close it out with a | and have at
" least two lines. Thanks tpope :)
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

" Buffrgator settings
"let g:buffergator_viewport_split_policy="B"
"let g:buffergator_split_size=10
"let g:buffergator_suppress_keymaps=1
"let g:buffergator_sort_regime = "mru"
"map <Leader>b :BuffergatorToggle<cr>

" commands from
" Pull up the TODO And NOTE and FIXME definitions from the whole app
let g:TagmaTasksHeight = 10
map <Leader><Leader>tt :TagmaTasks * app/** config/** db/** doc/** features/** lib/** public/** spec/** test/** vendor/**<CR>

let g:TagmaTasksPrefix = '<localleader>t'

" ----------- Dispatch configs ---------------------------------------

"autocmd FileType coffee let b:dispatch = 'coffee -c %'
"autocmd FileType html let b:dispatch = 'open %'
"autocmd BufNewFile,BufRead *_spec.js let b:dispatch = 'rake spec:javascript'
"autocmd BufNewFile,BufRead *_spec.coffee let b:dispatch = 'rake spec:javascript'
"autocmd BufNewFile,BufRead *_spec.js compiler jasmine
"autocmd BufNewFile,BufRead *_spec.coffee compiler jasmine

"autocmd FileType coffee nnoremap <buffer> <leader>t :Dispatch<CR>
"autocmd FileType javascript nnoremap <buffer> <leader>t :Dispatch<CR>

"" vim-rspec mappings (thoughtbot)
"map <Leader>u :call RunCurrentSpecFile()<CR>
"map <Leader>U :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
"map <Leader>a :call RunAllSpecs()<CR>
"let g:rspec_command = "Dispatch bundle exec bin/rspec {spec}"

" for rspec.vim (syntax highlighting enhancements for rspec)
"autocmd BufReadPost,BufNewFile *_foo.rb set syntax=rspec

" -----------------

" YankRing plugin to manage yanked/deleted buffers
" -----------------
let g:yankring_history_file = '.yankring-history'

" -----------------

" Gundo
" -----------------
" Dig through the tree of undo possibilities for your current file
let g:gundo_right = 1
let g:gundo_preview_bottom=1
let g:gundo_preview_height = 40

" Disable some built in commands I don't like
map K <Nop>

" Ensures color scheme works for the gutter diff indicators
highlight clear SignColumn

" Automatically source this file after it's saved
autocmd! bufwritepost vimrc_main source %

"From Gary Bernhardt
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 40 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer (NOTE: (2013-09-10) jonk => changed to " bin/rake)
  :0r! bin/rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction

" -----------------

" SEARCH OPTIONS
" -----------------
"" OR ELSE just highlight the match in red...
"function! HLNext (blinktime)
  "highlight WHITE_ON_RED    ctermfg=white  ctermbg=red
  "let [bufnum, lnum, col, off] = getpos('.')
  "let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
  "let target_pat = '\c\%#'.@/
  "let ring = matchadd('WHITE_ON_RED', target_pat, 101)
  "redraw
  "exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  "call matchdelete(ring)
  "redraw
"endfunction

" OR ELSE ring the match in red...
function! HLNext (blinktime)
    highlight RedOnRed ctermfg=red ctermbg=red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    echo matchlen
    let ring_pat = (lnum > 1 ? '\%'.(lnum-1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.\|' : '')
            \ . '\%'.lnum.'l\%>'.max([col-4,1]) .'v\%<'.col.'v.'
            \ . '\|'
            \ . '\%'.lnum.'l\%>'.max([col+matchlen-1,1]) .'v\%<'.(col+matchlen+3).'v.'
            \ . '\|'
            \ . '\%'.(lnum+1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.'
    let ring = matchadd('RedOnRed', ring_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction

" Gist stuff for mattn/gist-vim
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" markdown
augroup ft_markdown
  au!
  au BufNewFile,BufRead *.m*down setlocal filetype=markdown foldlevel=1
  " Use <localleader>1/2/3 to add headings.
  au Filetype markdown nnoremap <buffer> <localleader>1 mzI# <ESC>
  au Filetype markdown nnoremap <buffer> <localleader>2 mzI## <ESC>
  au Filetype markdown nnoremap <buffer> <localleader>3 mzI### <ESC>
augroup END

"autocmd Filetype markdown setlocal tw=80
"autocmd Filetype markdown setlocal wm=4
"autocmd Filetype markdown setlocal fo=cat

" Numbers Motion for numbers.
function! s:NumberTextObject(whole)
    normal! v

    while getline('.')[col('.')] =~# '\v[0-9]'
        normal! l
    endwhile

    if a:whole
        normal! o

        while col('.') > 1 && getline('.')[col('.') - 2] =~# '\v[0-9]'
            normal! h
        endwhile
    endif
endfunction

let g:InteractiveReplace_map = 'X'

"let g:signify_sign_color_guibg = '#032b36'
let g:signify_sign_color_inherit_from_linenr = 1
let g:signify_sign_weight = 'NONE'
let g:signify_update_on_bufenter = 0

" Reveal in Finder - opens finder to folder of the file that is currently open
command! Oif execute '!open %:p:h'

" search for stuff under the cursor, but don't jump to next match
" Name: Star search
" Author: Name5566 <name5566@gmail.com>
" Version: 0.1.1
if exists('loaded_starsearch')
  finish
endif
let loaded_starsearch = 1

let s:savedCpo = &cpo
set cpo&vim

function! s:VStarsearch_searchCWord()
  let wordStr = expand("<cword>")
  if strlen(wordStr) == 0
    echohl ErrorMsg
    echo 'E348: No string under cursor'
    echohl NONE
    return
  endif

  if wordStr[0] =~ '\<'
    let @/ = '\<' . wordStr . '\>'
  else
    let @/ = wordStr
  endif

  let savedUnnamed = @"
  let savedS = @s
  normal! "syiw
  if wordStr != @s
    normal! w
  endif
  let @s = savedS
  let @" = savedUnnamed
endfunction

" https://github.com/bronson/vim-visual-star-search/
function! s:VStarsearch_searchVWord()
  let savedUnnamed = @"
  let savedS = @s
  normal! gv"sy
  let @/ = '\V' . substitute(escape(@s, '\'), '\n', '\\n', 'g')
  let @s = savedS
  let @" = savedUnnamed
endfunction

nnoremap <silent> * :call <SID>VStarsearch_searchCWord()<CR>:set hls<CR>
vnoremap <silent> * :<C-u>call <SID>VStarsearch_searchVWord()<CR>:set hls<CR>

let &cpo = s:savedCpo
" End Star search

if !has('nvim')
" Zap smartquotes when pasting from MS Word
python << EOF
def zap():
    import vim

    def strip_gremlins(s):
        s = s.replace(u"\u201c", "\"").replace(u"\u201d", "\"") #strip double curly quotes
        s = s.replace(u"\u2018", "'").replace(u"\u2019", "'").replace(u"\u02BC", "'") #strip single curly quotes
        return s

    r = vim.current.range
    for index, line in enumerate(r):
        r[index] = strip_gremlins(line.decode('utf-8')).encode('utf-8')
EOF
command! -range=% Zap python zap()
endif

" -------------

" Syntastic
" -------------
" let g:vimrubocop_config = '~/.rubocop/custom.yml'
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_warning_symbol = "⚠"

" let g:syntastic_enable_signs=1

let g:syntastic_aggregate_errors = 1
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

" Visual Mode Orange Background, Black Text
hi Visual guifg=#000000 guibg=#FD971F

" -------------

" Restore cursor position, window position, and last search after running a
" command.
" -------------
function! Preserve(command)
  " Save the last search.
  let search = @/

  " Save the current cursor position.
  let cursor_position = getpos('.')

  " Save the current window position.
  normal! H
  let window_position = getpos('.')
  call setpos('.', cursor_position)

  " Execute the command.
  execute a:command

  " Restore the last search.
  let @/ = search

  " Restore the previous window position.
  call setpos('.', window_position)
  normal! zt

  " Restore the previous cursor position.
  call setpos('.', cursor_position)
endfunction

function! CleanFile()
  call Preserve(':set expandtab | retab!')
  call Preserve(':silent! %s#\($\n\s*\)\+\%$##')
  call Preserve(':%!cat -s')
endfunction

au BufWritePre * call CleanFile()
